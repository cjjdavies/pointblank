destination: docs/es

lang: es

home:
  strip_header: true

url: https://rstudio.github.io/pointblank/es

template:
  bootstrap: 5

reference:
  - title: Planificación y preparación
    desc: >
      Si necesita entender sus datos un poco más, utilice la función
      `scan_data()`. Proporciona un informe completo sobre los datos que
      podría estar planeando validar. Si va por el camino de preparar un
      análisis de calidad de datos, llame a un *agente* para llevar a
      cabo ese eventual plan con `create_agent()`. Al agente se le debe
      decir qué tabla es el objetivo, y, diseñamos un plan de validación
      por pasos con funciones de validación. Si tu objetivo es recoger y
      publicar información de la tabla, entonces empieza con la función
      `create_informant()`.
    contents:
    - scan_data
    - create_agent
    - create_informant
    - validate_rmd
    - action_levels
    - db_tbl
    - file_tbl
    - tbl_store
    - tbl_source
    - tbl_get
    - draft_validation

  - title: Funciones de validación, expectativa y prueba
    desc: >
      Los pasos de validación se utilizan con un objeto *agente* o, más
      sencillamente, sólo con la tabla de interés. Cuando se utiliza con un
      objeto *agent*, cada función llamada trabaja para construir un plan de
      validación (que se ejecuta con la función `interrogate()`). Si se utiliza
      directamente sobre los datos (es decir, no interviene ningún agente),
      entonces se comprueban los datos y se pasan. Sin embargo, si
      (1) establecemos umbrales de `warn_*` y/o `stop_*` y (2) el nivel de
      unidades de validación fallidas supera esos niveles establecidos,
      entonces obtendremos una advertencia o una parada. Cada función de
      validación está asociada a una función de expectativa (de la forma
      `expect_*()`). Estas funciones de expectativa son equivalentes en uso
      y comportamiento a las del paquete **testthat**. Por último, cada
      función de validación tiene una función de prueba asociada (de la forma
      `test_*()`) que siempre devuelve un valor lógico.
    contents:
    - col_vals_lt
    - col_vals_lte
    - col_vals_equal
    - col_vals_not_equal
    - col_vals_gte
    - col_vals_gt
    - col_vals_between
    - col_vals_not_between
    - col_vals_in_set
    - col_vals_not_in_set
    - col_vals_make_set
    - col_vals_make_subset
    - col_vals_increasing
    - col_vals_decreasing
    - col_vals_null
    - col_vals_not_null
    - col_vals_regex
    - col_vals_within_spec
    - col_vals_expr
    - rows_distinct
    - rows_complete
    - col_is_character
    - col_is_numeric
    - col_is_integer
    - col_is_logical
    - col_is_date
    - col_is_posix
    - col_is_factor
    - col_exists
    - col_schema_match
    - row_count_match
    - tbl_match
    - conjointly
    - serially
    - specially

  - title: Funciones de información
    desc: >
      Podemos añadir progresivamente información a un objeto *informant*
      utilizando la colección de funciones `info_*()`. Podemos añadir más
      propiedades basadas en la tabla con la función `info_tabular()`,
      detalles sobre la naturaleza de cada columna con la función
      `info_columns()`, y añadir secciones de nuestra elección (y la
      información que tenga sentido para esas secciones) con la función
      `info_section()`. Se pueden extraer fragmentos de información de la
      tabla de destino utilizando la función `info_snippet()`. Estos
      fragmentos de información pueden incorporarse al texto definido por
      las demás funciones `info_*()` mediante `{ }`. Se han incluido
      algunas funciones `snip_*()` para que el recorte de información sea
      tan fácil (y útil) como sea posible.
    contents:
    - info_tabular
    - info_columns
    - info_columns_from_tbl
    - info_section
    - info_snippet
    - snip_list
    - snip_stats
    - snip_lowest
    - snip_highest

  - title: Creación de correo electrónico
    desc: >
      A veces queremos enviar por correo electrónico un informe de una
      validación debido a la importancia de la información que contiene. La
      función `email_blast()` puede utilizarse dentro del argumento `end_fns`
      de `create_agent()`, lo que nos da la opción de enviar un mensaje
      personalizado sólo si se condiciones especificadas.
    contents:
    - email_blast
    - email_create
    - stock_msg_body
    - stock_msg_footer

  - title: Registro
    desc: >
      El registro de las condiciones de fallo de validación es una buena
      práctica durante análisis de la calidad de los datos. La función
      `log4r_step()` permite generar fácilmente generación de entradas de
      registro y la especificación de los destinos de registro.
    contents:
    - log4r_step

  - title: "El agente: Interrogar e informar"
    desc: >
      Si tenemos un objeto *agente* que tiene un plan (es decir, pasos de
      validación), la función `interrogar()` ordena al *agente* que
      interrogue la tabla de destino. El agente se pondrá a trabajar y
      también realizará las funciones de efecto secundario especificadas
      funciones de efecto secundario especificadas en el nivel de paso y al
      finalizar (si esas funciones están definidas). Tras la interrogación,
      podemos obtener un informe mediante impresión, sin embargo, podemos
      aprovechar más opciones utilizando la función función
      `get_agent_report()`.
    contents:
    - interrogate
    - get_agent_report

  - title: "El informante: incorporar e informar"
    desc: >
      Si tenemos un objeto *informante* que ha sido cargado con información
      de las funciones `info_*()`, la función `incorporar()` funciona para
      regenerar fragmentos e integrarlos en el texto informativo. Después de
      refrescar la información de la tabla, podemos obtener un informe de
      información mediante impresión, o bien, utilizando la función
      `get_informant_report()`.
    contents:
    - incorporate
    - get_informant_report

  - title: Después del interrogatorio
    desc: >
      El objeto `agente` siempre tiene una lista especial llamada 'x-list'.
      Acceda a ella invocando la función `get_agent_x_list()` y tendrá una
      gran cantidad de información sobre cómo se realizó la validación. Los
      extractos de la tabla son se recogen por defecto para las filas
      fallidas (hasta un límite) y podemos acceder con `get_data_extracts()`.
      Las filas de la tabla se pueden dividir en fragmentos de "pase" y
      "fallo". Accede a esos fragmentos de la tabla con la función
      `get_sundered_data()`. ¿Quieres saber si todos los pasos de validación
      han pasado con éxito? A veces puede ocurrir; utilice la función
      `all_passed()` para averiguarlo.
    contents:
    - get_agent_x_list
    - get_data_extracts
    - get_sundered_data
    - all_passed
    - write_testthat_file

  - title: Operaciones con objetos
    desc: >
      Tenemos opciones para escribir un agente o informante en el disco con
      la función `x_write_disk()`. El objeto en disco puede ser recuperado
      con la función función `x_read_disk()`. Puede exportar un informe como
      archivo HTML con `export_report()`. También se dispone de un conjunto
      de funciones para gestionar las asociaciones a una tabla de datos
      (directamente o con una fórmula de preparación de la tabla), y para
      editar los pasos de validación de un agente.
    contents:
    - x_write_disk
    - x_read_disk
    - export_report
    - set_tbl
    - remove_tbl
    - set_read_fn
    - remove_read_fn
    - activate_steps
    - deactivate_steps
    - remove_steps

  - title: El Multiagente
    desc: >
      El objeto `multiagente` es un grupo de agentes, cada uno de los
      cuales tiene que realizar su propio interrogatorio. Como grupo,
      proporcionan un interesante e interesante e informativo que sigue
      la evolución de los controles de calidad de los datos calidad de los
      datos a lo largo del tiempo. Con un objeto *multiagente*, podemos
      obtener un informe de calidad de datos de calidad de los datos que
      maneja los cambios en los datos de destino y hace coincidir los pasos
      de validación de los datos de datos en todos los agentes. La
      aplicación predominante es el análisis retrospectivo de la calidad
      de los datos de una tabla objetivo.
    contents:
    - create_multiagent
    - read_disk_multiagent
    - get_multiagent_report

  - title: pointblank YAML
    desc: >
      Los archivos YAML pueden ser utilizados en **pointblank** para dos
      propósitos distintos: (1) para definir objetos agente y sus planes
      de validación, y (2) para definir información para las tablas. La
      función `yaml_write()` nos permite escribir YAML de agente y/o
      informante desde los objetos homónimos. Podemos leerlos de nuevo
      desde el disco utilizando las funciones `yaml_read_agent()` y
      `yaml_read_informant()`. Como un buen atajo, podemos interrogar a
      una tabla directamente desde un archivo con `yaml_agent_interrogate()`.
    contents:
    - yaml_write
    - yaml_read_agent
    - yaml_read_informant
    - yaml_agent_interrogate
    - yaml_agent_string
    - yaml_agent_show_exprs
    - yaml_informant_incorporate
    - yaml_exec

  - title: Table Transformers
    desc: >
      Las funciones del **Table Transformers** pueden transformar
      radicalmente una tabla de datos y proporcionar una tabla totalmente
      diferente (como una tabla de resumen o una tabla de propiedades de la
      tabla) o hacer algún filtrado útil en un solo paso. Esto puede ser
      útil para preparar la tabla de destino para la validación, la creación
      de una tabla temporal para unos pocos pasos de validación, o incluso
      como algo que se utiliza fuera de los flujos de trabajo **pointblank**.
      Como ventaja, estas funciones transformadoras funcionan igualmente
      bien con marcos de datos, tablas de bases de datos y tablas de Spark y
      tablas de Spark.
    contents:
    - tt_summary_stats
    - tt_string_info
    - tt_tbl_dims
    - tt_tbl_colnames
    - tt_time_shift
    - tt_time_slice
    - get_tt_param

  - title: Funciones de utilidad y ayuda
    contents:
    - col_schema
    - has_columns
    - affix_date
    - affix_datetime
    - stop_if_not
    - from_github

  - title: Conjuntos de datos
    contents:
    - small_table
    - small_table_sqlite
    - specifications
    - game_revenue
    - game_revenue_info

navbar:
  type: default
  left:
  - text: Articles
    menu:
    - text: 'Flujos de trabajo de validación'
    - text: 'Overview'
      href: articles/validation_workflows.html
    - text: 'VALID-I: Informes sobre la calidad de los datos'
      href: articles/VALID-I.html
    - text: 'VALID-II: Validación de datos en los pipelines'
      href: articles/VALID-II.html
    - text: 'VALID-III: Expectativas en las pruebas unitarias'
      href: articles/VALID-III.html
    - text: 'VALID-IV: Pruebas de datos para condicionales'
      href: articles/VALID-IV.html
    - text: 'VALID-V: Table Scan'
      href: articles/VALID-V.html
    - text: 'VALID-VI: Validación de documentos R Markdown'
      href: articles/VALID-VI.html
    - text: 'Gestión de la información'
    - text: 'Introducción a la gestión de la información'
      href: 'articles/INFO-1.html'
    - text: 'Temas avanzados de gestión de la información'
      href: 'articles/INFO-2.html'
  - text: Reference
    href: reference/index.html
  - text: News
    href: news/index.html
  - text: In English
    href: https://rstudio.github.io/pointblank

development:
  version_tooltip: "Development version"
